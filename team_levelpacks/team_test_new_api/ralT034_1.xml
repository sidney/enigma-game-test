<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<el:level xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://enigma-game.org/schema/level/1 level.xsd" xmlns:el="http://enigma-game.org/schema/level/1">
  <el:protected>
    <el:info el:type="level">
      <el:identity el:title="Test default floor new API" el:subtitle="" el:id="20080206ral636"/>
      <el:version el:score="1" el:release="1" el:revision="$Revision$" el:status="experimental"/>
      <el:author  el:name="Ronald Lamprecht" el:email="ral@users.berlios.de"/>
      <el:copyright>Copyright Â© 2007 Ronald Lamprecht</el:copyright>
      <el:license el:type="GPL v2.0 or above" el:open="true"/>
      <el:compatibility el:enigma="1.10">
      </el:compatibility>
      <el:modes el:easy="true" el:single="true" el:network="false"/>
      <el:comments>
      </el:comments>
      <el:score el:easy="-" el:difficult="-"/>
    </el:info>
    <el:luamain><![CDATA[


wo["ConserveLevel"] = true

ti["_"] = {"fl-sahara"}
ti["r"] = {"fl-rough-red"}
ti["b"] = {"fl-rough-blue"}
ti["."] = ti({"fl-rough-blue", checkerboard=0}) .. {"fl-rough-red", checkerboard=1}

ti[" "] = ti["."] .. {"it_blocker"}
ti["n"] = {}       -- just nothing
ti["w"] = {"st-wood"}
ti["s"] = {"st_switch", target="rmfloor"}
ti["i"] = {"st_switch", target="icefloor"}

ti["1"] = ti["b"] .. {"#ac-blackball"}
ti["2"] = ti["b"] .. {"#ac-bug", "mybug"}

function myresolver(key, x, y)
    if key == " " then
        if math.random() >= 0.3 then
            return ti["b"]
        else
            return ti["r"]
        end
    else
        return ti[key]
    end
end

res = {}

function res.random_implementation(context, evaluator, key, x, y)
    for hit_itr, hit_pair in ipairs(context[3]) do
        if key == hit_pair[1] then
            local super = nil
            if hit_pair[2] ~= nil then
                super = evaluator(context[2], hit_pair[2], x, y)
            end
            local repl_key
            -- dummy test implementation with 2 keys
            local r = math.random(context[5])
            local i = 1
            local s = context[4][i][2]
            while s < r do
                i = i + 1
                s = s + context[4][i][2]
            end
            repl_key = context[4][i][1]
            local replacement = evaluator(context[2], repl_key, x, y)
            if super == nil then
                return replacement
            elseif type(super) == "table" then
                return ti(super) .. replacement
            else
                return super .. replacement
            end
        end
    end
    -- key not found
    return evaluator(context[2], key, x, y)
end

function res.random(subresolver, hits, replacements)
    -- syntax: hits = key | {key, [key]*, [{key, superkey}]*}
    --         replacements = {key, [key]*, [{key, frequency}]*}
    -- TODO check args!
    
    local hit_table = {}
    if type(hits) == "string" then
        hit_table[1] = {hits, nil}
    else
        for i, v in ipairs(hits) do
            if type(v) == "string" then
                hit_table[i] = {v, nil}
            elseif type(v) == "table" then
                hit_table[i] = v
            end
        end
    end
    
    local repl_table = {}
    for i, v in ipairs(replacements) do
        if type(v) == "string" then
            repl_table[i] = {v, 1}
        elseif type(v) == "table" then
            repl_table[i] = v
        end
    end
    local repl_sum = 0
    for i, v in ipairs(repl_table) do
        repl_sum = repl_sum + v[2]
    end
    local context = {res.random_implementation, subresolver, hit_table, 
                      repl_table, repl_sum}
    return context
end


function fullresolver_implementation(context, evaluator, key, x, y)
    if key == "b" then
        return ti["r"]
    elseif key == "r" then
        return ti["b"]
    else
        return evaluator(context[2], key, x, y)
    end
end

function fullresolver(subresolver)
    local context = {fullresolver_implementation, subresolver}
    return context
end

resolver = ti
if wo["IsDifficult"] then
--    resolver = fullresolver(myresolver)
--    resolver = res.random(ti, " ", {"r","b"})
--    resolver = res.random(ti, " ", {"r",{"b", 4},"_"})
--    resolver = res.random(ti, {" ","w"}, {"r",{"b", 4},"_"})
    resolver = res.random(ti, {" ",{"w","w"}}, {"r",{"b", 2},{"_",4}})
end

w, h = wo(resolver, " ", {
"                    ",
" w     bbbbb        ",
" w  bbbrrrrrbbb  ",
"   bbrr.....rrbb ",
"   br.........rb    ",
"  br...........rb   ",
"  br...........rb   ",
"  br...........rb   ",
"   br.........rb    ",
"   bbrr.....rrbb    ",
"    b2brrrrrb1b     ",
"       bbbbb        ",
"si             n    "
})

function icefloor(value, sender)
    wo[no["mybug"]] = {"fl-ice"}
end

function rmfloor(value, sender)
    wo[no["mybug"]] = {"fl_nil"}
end
  
  ]]></el:luamain>
    <el:i18n>
	 <el:string el:key="title">
	   <el:english el:translate="false"/>
	 </el:string>
   </el:i18n>
  </el:protected>
</el:level>

