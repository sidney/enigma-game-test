<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<el:level xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://enigma-game.org/schema/level/1 level.xsd" xmlns:el="http://enigma-game.org/schema/level/1">
  <el:protected>
    <el:info el:type="level">
      <el:identity el:title="Test libmap" el:subtitle="" el:id="test_libmap"/>
      <el:version el:score="1" el:release="1" el:revision="3" el:status="experimental"/>
      <el:author  el:name="Andreas Lochmann" el:email=""/>
      <el:copyright>Copyright Â© 2008 Andreas Lochmann</el:copyright>
      <el:license el:type="GPL v2.0 or above" el:open="true"/>
      <el:compatibility el:enigma="1.10">
        <el:dependency el:path="lib/libmap" el:id="lib/libmap" el:release="1" el:preload="true"/>
      </el:compatibility>
      <el:modes el:easy="false" el:single="true" el:network="false"/>
      <el:comments>
      </el:comments>
      <el:score el:easy="-" el:difficult="-"/>
    </el:info>
    <el:luamain><![CDATA[

wo["ConserveLevel"] = true

ti["  "] = {"fl_sahara"}
ti["A "] = {"fl_lawn"}
ti["B "] = {"fl_swamp"}
ti["C "] = {"fl_metal"}
ti["D "] = {"fl_dark"}
ti["E "] = {"fl_inverse"}
ti["F "] = {"fl_blueslab"}
ti["G "] = {"fl_rough"}
ti["H "] = {"fl_bast"}
ti["I "] = {"fl_abyss"}
ti["J "] = {"fl_water"}
ti["v "] = {"it_banana"}

ti[" "] = {"fl_sahara"}
ti["A"] = {"fl_lawn"}
ti["B"] = {"fl_swamp"}
ti["C"] = {"fl_metal"}
ti["D"] = {"fl_dark"}
ti["E"] = {"fl_inverse"}
ti["F"] = {"fl_blueslab"}
ti["G"] = {"fl_rough"}
ti["H"] = {"fl_bast"}
ti["R"] = {"fl_red"}
ti["v"] = {"it_banana"}

ti[" @"] = {"#ac_marble", "marble"}
ti[" d"] = {"st_death", "death#"}
ti[" 1"] = {"it_wrench"}
ti[" S"] = {"st_switch", target = "call_switch1"}
ti[" T"] = {"st_switch", target = "call_switch2"}
ti[" U"] = {"st_switch", target = "call_switch3"}
ti[" V"] = {"st_switch", target = "call_switch4"}

ti["@"] = {"#ac_marble", "marble"}
ti["d"] = {"st_death", "death#"}
ti["1"] = {"it_wrench", "wrench#"}

map1 = wo:newMap(" ", {
"                    ",
"         CCCC  DDDD ",
"         CCCC  DDDD ",
"                    ",
"   AAAA  BBBB  EEEE ",
"   AAAA  BBBB  EEEE ",
"                    ",
"   FFFF  GGGG  HHHH ",
"   FFFF  GGGG  HHHH ",
"                    ",
"                    ",
"    v               ",
"                    "})

map2a = wo:newMap(" ", {
"1",
" ",
"   ",
"",
"",
"     @"})

map2b = wo:newMap(" ", {
"",
"          1   ",
"          1",
"     d    1",
"          1   ",
"          1   "})

map2c = wo:newMap(" ", {
"                1   ",
"   d            1   ",
"                1   ",
"                1   ",
"           d    1",
"                1   ",
"1                  d"})

map2 = (map2a .. map2b) + map2c
map3 = map1 * map2
map3[{0,0}] = "BS"
map3[{0, map3.height-1}] = "BT"
map3[{map3.width-1, 0}] = "BU"
map3:replace("v ", " V")

with_bars = map3 * "|"
with_bars:print(true, "|")

levelw, levelh = wo(res.composer(ti), map3)

rect_map = wo:newMap("-", map1)
function call_switch1()
  wo:drawMap(ti, {0, 0}, "-", wo:newMap(" ", levelw, levelh))
  if (rect_map.width > 3) and (rect_map.height > 3) then
    local sub_map = rect_map:sub({1,1}, rect_map.width-3, rect_map.height-3)
    rect_map = wo:newMap("R", rect_map.width - 1, rect_map.height - 1)
    rect_map.defaultkey = "-"
    rect_map:paste(sub_map, {1, 1})
  end
  wo:drawMap(ti, no["marble"], rect_map)
end

count = 0
decomap = wo:newMap("-", {"I--J", "I--J", "I--I"}) * " "
alldirs = {MAP_IDENT, MAP_ROT_CW, MAP_ROT_180, MAP_ROT_CCW, MAP_FLIP_BACKSLASH,
           MAP_FLIP_HORIZONTAL, MAP_FLIP_SLASH, MAP_FLIP_VERTICAL}
function call_switch2()
  dir = alldirs[count % #alldirs + 1]
  wo:drawMap(res.composer(ti), {0, 0}, "-", map1)
  for obj in no["death#*"] do
    wo:drawMap(res.composer(ti), obj - {1,1}, decomap^dir)
  end
  count = count + 1
end

function call_switch3()
  map1:replace("G", "A")
  wo:drawMap(res.composer(ti), {0,0}, map1)
end

switch4_counter = 0
function call_switch4()
  switch4_counter = switch4_counter + 1
      if switch4_counter == 1 then
    wo[map1:match("C")] = {"it_cherry"}
  elseif switch4_counter == 2 then
    wo[map1:match({NEIGHBORS_4, " ", "G", "B"})] = {"it_banana"}
  elseif switch4_counter == 3 then
    wo[map1:match({po(0,1), "G"}, {po(0,-1), "B"})] = {"it_extralife"}
  elseif switch4_counter == 4 then
    wo[map1:match({po(0,1), "G"})] = {"it_sword"}
  elseif switch4_counter == 5 then
    wo[map1:match({po(0,1), "G"})] = {"it_hammer"}
  elseif switch4_counter == 6 then
    wo[map1:match({po(0,1), "G"}, {NEIGHBORS_4, " ", "G"})] = {"it_sword"}
  elseif switch4_counter == 7 then
    wo[map1:match({{po(0,1), "G"}, {NEIGHBORS_4, " ", "G"}})] = {"it_hammer"}
  elseif switch4_counter == 8 then
    wo[map1:match()] = {"it_nil"}
    switch4_counter = 0
  end
end

  ]]></el:luamain>
    <el:i18n>
     <el:string el:key="title">
       <el:english el:translate="false"/>
     </el:string>
   </el:i18n>
  </el:protected>
</el:level>
